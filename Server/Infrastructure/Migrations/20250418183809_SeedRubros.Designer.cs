// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250418183809_SeedRubros")]
    partial class SeedRubros
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activa")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImagenUrl")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ciudad")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Direccion")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("EsConsumidorFinal")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EsEmpresa")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("LimiteCredito")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumeroDocumento")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Provincia")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PuntosFidelidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<decimal?>("SaldoActual")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("TipoDocumento")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UltimaCompra")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Domain.Entities.Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ComprobanteAnulacionId")
                        .HasColumnType("int");

                    b.Property<int>("ComprobanteId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Descuento")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("DiasPlazoPago")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaVencimientoPago")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FormaPago")
                        .HasColumnType("int");

                    b.Property<int>("NegocioId")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Pagado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComprobanteAnulacionId");

                    b.HasIndex("ComprobanteId");

                    b.HasIndex("NegocioId");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("Domain.Entities.CompraDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<double>("Importe")
                        .HasColumnType("double");

                    b.Property<double?>("Peso")
                        .HasColumnType("double");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("ComprasDetalles");
                });

            modelBuilder.Entity("Domain.Entities.Comprobante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MotivoAnulacion")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TipoComprobante")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Comprobante");
                });

            modelBuilder.Entity("Domain.Entities.Negocio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Altura")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Calle")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ciudad")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdPlanSaas")
                        .HasColumnType("int");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Moneda")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumeroDocumento")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Pais")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PlanSaasId")
                        .HasColumnType("int");

                    b.Property<string>("Provincia")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("RubroId")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TipoDocumento")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TipoFacturacion")
                        .HasColumnType("int");

                    b.Property<bool?>("UsaFacturacion")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PlanSaasId");

                    b.HasIndex("RubroId");

                    b.ToTable("Negocios");
                });

            modelBuilder.Entity("Domain.Entities.PlanSaas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("AccesoFacturacion")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("AccesoPersonalizacion")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("AccesoReportes")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("AccesoSoportePrioritario")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Costo")
                        .HasColumnType("double");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("LimiteAlmacenamientoMB")
                        .HasColumnType("int");

                    b.Property<int?>("LimiteProductos")
                        .HasColumnType("int");

                    b.Property<int?>("LimiteUsuarios")
                        .HasColumnType("int");

                    b.Property<int?>("LimiteVentasMensuales")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Periodo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PlanesSaas");
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("CodigoBarras")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("GestionaStock")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImagenUrl")
                        .HasColumnType("varchar(250)");

                    b.Property<bool?>("IncluyeImpuestos")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Marca")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Margen")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Moneda")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("PrecioCosto")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PrecioVenta")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("StockActual")
                        .HasColumnType("int");

                    b.Property<int?>("StockMaximo")
                        .HasColumnType("int");

                    b.Property<int?>("StockMinimo")
                        .HasColumnType("int");

                    b.Property<bool>("TieneVencimiento")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UnidadMedidaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("UnidadMedidaId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Domain.Entities.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Ciudad")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("DiasPlazoPago")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("LimiteCredito")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumeroDocumento")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Provincia")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int?>("RubroId")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("TipoDocumento")
                        .HasColumnType("int");

                    b.Property<string>("Web")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RubroId");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("Domain.Entities.Puesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DireccionIP")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DireccionMAC")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImpresoraConfigurada")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("NegocioId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("TipoImpresora")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UltimaConexion")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("NegocioId");

                    b.ToTable("Puestos");
                });

            modelBuilder.Entity("Domain.Entities.Rubro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Rubros");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Descripcion = "Productos comestibles, bebidas alcohólicas y no alcohólicas",
                            FechaAlta = new DateTime(2025, 4, 18, 15, 38, 8, 64, DateTimeKind.Local).AddTicks(4715),
                            Nombre = "Alimentos y Bebidas"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Descripcion = "Artículos eléctricos para el hogar",
                            FechaAlta = new DateTime(2025, 4, 18, 15, 38, 8, 64, DateTimeKind.Local).AddTicks(4717),
                            Nombre = "Electrodomésticos"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Descripcion = "Ropa y accesorios de moda",
                            FechaAlta = new DateTime(2025, 4, 18, 15, 38, 8, 64, DateTimeKind.Local).AddTicks(4718),
                            Nombre = "Indumentaria"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Descripcion = "Productos de higiene y limpieza",
                            FechaAlta = new DateTime(2025, 4, 18, 15, 38, 8, 64, DateTimeKind.Local).AddTicks(4720),
                            Nombre = "Limpieza"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            Descripcion = "Herramientas y artículos de construcción",
                            FechaAlta = new DateTime(2025, 4, 18, 15, 38, 8, 64, DateTimeKind.Local).AddTicks(4722),
                            Nombre = "Ferretería"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            Descripcion = "Equipos informáticos, celulares, accesorios",
                            FechaAlta = new DateTime(2025, 4, 18, 15, 38, 8, 64, DateTimeKind.Local).AddTicks(4723),
                            Nombre = "Tecnología"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UnidadMedida", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abreviatura")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TipoUnidadMedida")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UnidadesMedidas");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IpUltimoLogin")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NegocioId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NumeroDocumento")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<int?>("TipoDocumento")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UltimoLogin")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("NegocioId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Domain.Entities.UsuarioPuesto", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("PuestoId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "PuestoId");

                    b.HasIndex("PuestoId");

                    b.ToTable("UsuariosPuestos");
                });

            modelBuilder.Entity("Domain.Entities.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AfectaCaja")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int?>("ComprobanteAnulacionId")
                        .HasColumnType("int");

                    b.Property<int>("ComprobanteId")
                        .HasColumnType("int");

                    b.Property<decimal?>("DescuentoTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FormaPago")
                        .HasColumnType("int");

                    b.Property<decimal?>("Impuestos")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("NegocioId")
                        .HasColumnType("int");

                    b.Property<int>("PuestoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<decimal?>("Subtotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ComprobanteAnulacionId");

                    b.HasIndex("ComprobanteId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("NegocioId");

                    b.HasIndex("PuestoId");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("Domain.Entities.VentaDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<double>("Importe")
                        .HasColumnType("double");

                    b.Property<double?>("Peso")
                        .HasColumnType("double");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<int?>("VentaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentaId");

                    b.ToTable("VentasDetalles");
                });

            modelBuilder.Entity("Domain.Entities.Compra", b =>
                {
                    b.HasOne("Domain.Entities.Comprobante", "ComprobanteAnulacion")
                        .WithMany()
                        .HasForeignKey("ComprobanteAnulacionId");

                    b.HasOne("Domain.Entities.Comprobante", "Comprobante")
                        .WithMany()
                        .HasForeignKey("ComprobanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Negocio", "Negocio")
                        .WithMany()
                        .HasForeignKey("NegocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorId");

                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Comprobante");

                    b.Navigation("ComprobanteAnulacion");

                    b.Navigation("Negocio");

                    b.Navigation("Proveedor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.CompraDetalle", b =>
                {
                    b.HasOne("Domain.Entities.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Domain.Entities.Negocio", b =>
                {
                    b.HasOne("Domain.Entities.PlanSaas", "PlanSaas")
                        .WithMany()
                        .HasForeignKey("PlanSaasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Rubro", "Rubro")
                        .WithMany()
                        .HasForeignKey("RubroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanSaas");

                    b.Navigation("Rubro");
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.HasOne("Domain.Entities.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId");

                    b.HasOne("Domain.Entities.UnidadMedida", "UnidadMedida")
                        .WithMany()
                        .HasForeignKey("UnidadMedidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("UnidadMedida");
                });

            modelBuilder.Entity("Domain.Entities.Proveedor", b =>
                {
                    b.HasOne("Domain.Entities.Rubro", "Rubro")
                        .WithMany()
                        .HasForeignKey("RubroId");

                    b.Navigation("Rubro");
                });

            modelBuilder.Entity("Domain.Entities.Puesto", b =>
                {
                    b.HasOne("Domain.Entities.Negocio", "Negocio")
                        .WithMany()
                        .HasForeignKey("NegocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Negocio");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.HasOne("Domain.Entities.Negocio", "Negocio")
                        .WithMany()
                        .HasForeignKey("NegocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Negocio");
                });

            modelBuilder.Entity("Domain.Entities.UsuarioPuesto", b =>
                {
                    b.HasOne("Domain.Entities.Puesto", "Puesto")
                        .WithMany()
                        .HasForeignKey("PuestoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Puesto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.Venta", b =>
                {
                    b.HasOne("Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("Domain.Entities.Comprobante", "ComprobanteAnulacion")
                        .WithMany()
                        .HasForeignKey("ComprobanteAnulacionId");

                    b.HasOne("Domain.Entities.Comprobante", "Comprobante")
                        .WithMany()
                        .HasForeignKey("ComprobanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Negocio", "Negocio")
                        .WithMany()
                        .HasForeignKey("NegocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Puesto", "Puesto")
                        .WithMany()
                        .HasForeignKey("PuestoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Comprobante");

                    b.Navigation("ComprobanteAnulacion");

                    b.Navigation("Empleado");

                    b.Navigation("Negocio");

                    b.Navigation("Puesto");
                });

            modelBuilder.Entity("Domain.Entities.VentaDetalle", b =>
                {
                    b.HasOne("Domain.Entities.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Venta", null)
                        .WithMany("Detalles")
                        .HasForeignKey("VentaId");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Domain.Entities.Venta", b =>
                {
                    b.Navigation("Detalles");
                });
#pragma warning restore 612, 618
        }
    }
}
